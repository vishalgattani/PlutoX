# 1 "src/main/PlutoPilot.cpp"
# 1 "E:\\Cygnus\\workspace\\Xrangingfollowbothsides//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 199711L
#define __STDC_HOSTED__ 1
#define __GNUC__ 6
#define __GNUC_MINOR__ 3
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "6.3.1 20170620 (release) [ARM/embedded-6-branch revision 249437]"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE_SIZE__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 8
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __GNUG__ 6
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_RTTI 1
#define __cpp_rtti 199711
#define __cpp_binary_literals 201304
#define __cpp_hex_float 201603
#define __cpp_runtime_arrays 198712
#define __EXCEPTIONS 1
#define __cpp_exceptions 199711
#define __GXX_ABI_VERSION 1010
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.7976931348623157e+308L)
#define __DBL_MIN__ double(2.2250738585072014e-308L)
#define __DBL_EPSILON__ double(2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ double(4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 31
#define __LLACCUM_IBIT__ 32
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
#define __LLACCUM_EPSILON__ 0x1P-31LLK
#define __ULLACCUM_FBIT__ 32
#define __ULLACCUM_IBIT__ 32
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 63
#define __TA_IBIT__ 64
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 64
#define __UTA_IBIT__ 64
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_GNU_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __WCHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __ARM_FEATURE_DSP 1
#define __ARM_FEATURE_QBIT 1
#define __ARM_FEATURE_SAT 1
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#define __ARM_FEATURE_UNALIGNED 1
#undef __ARM_FEATURE_QRDMX
# 1 "<built-in>"
#define __ARM_32BIT_STATE 1
#define __ARM_FEATURE_LDREX 7
#define __ARM_FEATURE_CLZ 1
#define __ARM_FEATURE_SIMD32 1
#define __ARM_SIZEOF_MINIMAL_ENUM 1
#define __ARM_SIZEOF_WCHAR_T 4
#define __ARM_ARCH_PROFILE 77
#define __arm__ 1
#define __ARM_ARCH 7
#define __APCS_32__ 1
#define __thumb__ 1
#define __thumb2__ 1
#define __THUMBEL__ 1
#define __ARM_ARCH_ISA_THUMB 2
#define __ARMEL__ 1
#define __VFP_FP__ 1
#define __ARM_FP 4
#define __ARM_FEATURE_FMA 1
#undef __ARM_NEON__
# 1 "<built-in>"
#undef __ARM_NEON
# 1 "<built-in>"
#undef __ARM_NEON_FP
# 1 "<built-in>"
#define __THUMB_INTERWORK__ 1
#define __ARM_ARCH_7EM__ 1
#define __ARM_PCS_VFP 1
#define __ARM_EABI__ 1
#define __ARM_ARCH_EXT_IDIV__ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
#define __ARM_FEATURE_COPROC 15
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __ELF__ 1
# 1 "<command-line>"
#define __USES_INITFINI__ 1
#define DEBUG 1
#define STM32F303xC 1
#define STM32F303 1
#define FLASH_SIZE 256
#define USE_STDPERIPH_DRIVER 1
#define PLUTOX 1
#define __NAME__ "Experience"
#define __TARGET__ "PLUTOX"
# 1 "src/main/PlutoPilot.cpp"





# 1 "./src/includes/PlutoPilot.h" 1







#define _PlutoPilot_H_ 
# 7 "src/main/PlutoPilot.cpp" 2
# 1 "./platform/XRanging.h" 1




       

# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stdint.h" 1 3 4
# 9 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stdint.h" 3 4
# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 1 3 4
# 10 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define _STDINT_H 

# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 1 3 4





#define _MACHINE__DEFAULT_TYPES_H 

# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 1 3 4
# 22 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define _SYS_FEATURES_H 



# 25 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
extern "C" {


# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\_newlib_version.h" 1 3 4



#define _NEWLIB_VERSION_H__ 1

#define _NEWLIB_VERSION "2.5.0"
#define __NEWLIB__ 2
#define __NEWLIB_MINOR__ 5
#define __NEWLIB_PATCHLEVEL__ 0
# 29 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 2 3 4




#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 128 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1



#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
# 155 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
# 242 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __ATFILE_VISIBLE 1





#define __BSD_VISIBLE 1







#define __GNU_VISIBLE 0







#define __ISO_C_VISIBLE 1999







#define __LARGEFILE_VISIBLE 0



#define __MISC_VISIBLE 1





#define __POSIX_VISIBLE 200809
# 298 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __SVID_VISIBLE 1
# 314 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __XSI_VISIBLE 0
# 516 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\features.h" 3 4
}
# 9 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 2 3 4






#define __EXP(x) __ ##x ##__
# 26 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
#define __have_longlong64 1






#define __have_long32 1



extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;



#define ___int8_t_defined 1







typedef short int __int16_t;

typedef short unsigned int __uint16_t;



#define ___int16_t_defined 1
# 77 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;



#define ___int32_t_defined 1
# 103 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;



#define ___int64_t_defined 1
# 134 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;



#define ___int_least8_t_defined 1
# 160 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;



#define ___int_least16_t_defined 1
# 182 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;



#define ___int_least32_t_defined 1
# 200 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;



#define ___int_least64_t_defined 1







typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 244 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
#undef __EXP


}
# 13 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 2 3 4
# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 1 3 4
# 10 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define _SYS__INTSUP_H 





#define __STDINT_EXP(x) __ ##x ##__
# 35 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
       
       
       
       
       
       
       
#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef __int20
#undef long
#define signed +0
#define unsigned +0
#define char +0
#define short +1
#define __int20 +2
#define int +2
#define long +4
# 64 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define _INTPTR_EQ_INT 






#define _INT32_EQ_LONG 







#define __INT8 "hh"
# 90 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __INT16 "h"
# 101 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __INT32 "l"
# 110 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __INT64 "ll"






#define __FAST8 
# 126 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __FAST16 






#define __FAST32 
# 144 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __FAST64 "ll"



#define __LEAST8 "hh"
# 159 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __LEAST16 "h"
# 170 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __LEAST32 "l"
# 179 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __LEAST64 "ll"

#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef long
       
       
       
       
       
# 191 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#undef __int20
       
       
# 14 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 2 3 4
# 1 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_stdint.h" 1 3 4
# 10 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\sys\\_stdint.h" 3 4
#define _SYS__STDINT_H 




extern "C" {




typedef __int8_t int8_t ;
#define _INT8_T_DECLARED 


typedef __uint8_t uint8_t ;
#define _UINT8_T_DECLARED 

#define __int8_t_defined 1




typedef __int16_t int16_t ;
#define _INT16_T_DECLARED 


typedef __uint16_t uint16_t ;
#define _UINT16_T_DECLARED 

#define __int16_t_defined 1




typedef __int32_t int32_t ;
#define _INT32_T_DECLARED 


typedef __uint32_t uint32_t ;
#define _UINT32_T_DECLARED 

#define __int32_t_defined 1




typedef __int64_t int64_t ;
#define _INT64_T_DECLARED 


typedef __uint64_t uint64_t ;
#define _UINT64_T_DECLARED 

#define __int64_t_defined 1



typedef __intmax_t intmax_t;
#define _INTMAX_T_DECLARED 



typedef __uintmax_t uintmax_t;
#define _UINTMAX_T_DECLARED 



typedef __intptr_t intptr_t;
#define _INTPTR_T_DECLARED 



typedef __uintptr_t uintptr_t;
#define _UINTPTR_T_DECLARED 



}
# 15 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 2 3 4


extern "C" {



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1



typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1



typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1



typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
# 51 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1







  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1







  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1







  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
# 128 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX (__INTPTR_MAX__)
#define UINTPTR_MAX (__UINTPTR_MAX__)
# 152 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX (__INT8_MAX__)
#define UINT8_MAX (__UINT8_MAX__)







#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX (__INT_LEAST8_MAX__)
#define UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)
# 174 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX (__INT16_MAX__)
#define UINT16_MAX (__UINT16_MAX__)







#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX (__INT_LEAST16_MAX__)
#define UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)
# 196 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX (__INT32_MAX__)
#define UINT32_MAX (__UINT32_MAX__)
# 212 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX (__INT_LEAST32_MAX__)
#define UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)
# 230 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX (__INT64_MAX__)
#define UINT64_MAX (__UINT64_MAX__)
# 246 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX (__INT_LEAST64_MAX__)
#define UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)
# 262 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX (__INT_FAST8_MAX__)
#define UINT_FAST8_MAX (__UINT_FAST8_MAX__)
# 278 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX (__INT_FAST16_MAX__)
#define UINT_FAST16_MAX (__UINT_FAST16_MAX__)
# 294 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX (__INT_FAST32_MAX__)
#define UINT_FAST32_MAX (__UINT_FAST32_MAX__)
# 310 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX (__INT_FAST64_MAX__)
#define UINT_FAST64_MAX (__UINT_FAST64_MAX__)
# 326 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTMAX_MAX (__INTMAX_MAX__)
#define INTMAX_MIN (-INTMAX_MAX - 1)







#define UINTMAX_MAX (__UINTMAX_MAX__)







#define SIZE_MAX (__SIZE_MAX__)





#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))



#define PTRDIFF_MAX (__PTRDIFF_MAX__)



#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)




#define WCHAR_MIN (__WCHAR_MIN__)
# 374 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define WCHAR_MAX (__WCHAR_MAX__)
# 384 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define WINT_MAX (__WINT_MAX__)




#define WINT_MIN (__WINT_MIN__)






#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
# 408 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
# 420 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
# 433 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
# 449 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
# 463 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\arm-none-eabi\\include\\stdint.h" 3 4
}
# 10 "e:\\cygnus\\tools\\toolchain\\gcc-arm\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 8 "./platform/XRanging.h" 2



# 10 "./platform/XRanging.h"
extern "C" {


typedef enum laser_sensors {
    LEFT = 0,
    RIGHT,
    FRONT,
    BACK

} laser_e;


class XRanging_P {

public:

    void init();
    void init(laser_e laser);
    int16_t getRange(laser_e laser);

};

extern XRanging_P XRanging;


}
# 8 "src/main/PlutoPilot.cpp" 2
# 1 "./platform/Utils.h" 1





       






extern "C" {



typedef enum {
    RED = 0,
    GREEN,
    BLUE

} led_e;

typedef enum {
    OFF = 0,
    ON,
    TOGGLE

} led_state_e;


typedef enum {

    ACTIVATE = 0,
    DEACTIVATE

} flightstatus_state_e;




class LED_P {
public:

    void set(led_e LED, led_state_e STATE);

    void flightStatus(flightstatus_state_e STATE);



};


class Graph_P {
public:

    void red(double value, uint8_t precision=4);

    void green(double value, uint8_t precision=4);

    void blue(double value, uint8_t precision=4);

};



class Interval {

private:

uint32_t time;
uint32_t loopTime;



public:


    bool set(uint32_t time, bool repeat);
    void reset(void);


};




class Monitor_P {

public:


void print(const char* msg);

void print(const char* tag, int number);

void print(const char* tag, double number, uint8_t precision);

void println(const char* msg);

void println(const char* tag, int number);

void println(const char* tag, double number, uint8_t precision);


};

uint32_t micros();

uint32_t millis();


extern LED_P LED;
extern Graph_P Graph;
extern Monitor_P Monitor;



}
# 9 "src/main/PlutoPilot.cpp" 2
# 1 "./platform/Peripheral.h" 1





       



# 1 "./platform/Specifiers.h" 1





       


extern "C" {


typedef enum unibus {
    Pin1 = 1,
    Pin2,
    Pin3,
    Pin4,
    Pin5,
    Pin6,
    Pin7,
    Pin8,
    Pin9,
    Pin10,
    Pin11,
    Pin12,
    Pin13,
    Pin14,
    Pin15,
    Pin16,
    Pin17,
    Pin18,
    Pin19,
    Pin20
} unibus_e;


}
# 11 "./platform/Peripheral.h" 2


extern "C" {



typedef enum{
    INPUT,
    INPUT_PU,
    INPUT_PD,
    OUTPUT,
} GPIO_Mode_e;


typedef enum{
    STATE_LOW,
    STATE_HIGH,
    STATE_TOGGLE
} GPIO_State_e;



class GPIO_P {
public:

    void init(unibus_e pin_number, GPIO_Mode_e mode);

    bool read(unibus_e pin_number);

    void write(unibus_e pin_number,GPIO_State_e STATE);


};


class ADC_P {
public:

    void init(unibus_e pin_number);


    uint16_t read(unibus_e pin_number);
};



typedef enum{
    UART2,
    UART3
}UART_Port_e;


typedef enum{
    BAUD_RATE_4800,
    BAUD_RATE_9600,
    BAUD_RATE_14400,
    BAUD_RATE_19200,
    BAUD_RATE_38400,
    BAUD_RATE_57600,
    BAUD_RATE_115200,
    BAUD_RATE_128000,
    BAUD_RATE_256000
}UART_Baud_Rate_e;


class UART_P {
public:


    void init(UART_Port_e PORT, UART_Baud_Rate_e BAUD);


    uint8_t read8(UART_Port_e PORT);

    uint16_t read16(UART_Port_e PORT);

    uint32_t read32(UART_Port_e PORT);


    void write(UART_Port_e PORT, uint8_t data);

    void write(UART_Port_e PORT, const char *str);

    void write(UART_Port_e PORT, uint8_t* data, uint16_t length);

    bool rxBytesWaiting(UART_Port_e PORT);

    bool txBytesFree(UART_Port_e PORT);

};



class I2C_P {
public:


    uint8_t* read(uint8_t device_add, uint8_t reg, uint32_t length);


    bool write(uint8_t device_add, uint8_t reg, uint32_t length, uint8_t* data);

};


class PWM_P {

public:

    void init(unibus_e pin_number, uint16_t pwmRate);

    void write(unibus_e pin_number, uint16_t pwmValue);

};





extern GPIO_P GPIO;
extern ADC_P ADC;
extern UART_P UART;
extern I2C_P I2C;
extern PWM_P PWM;



}
# 10 "src/main/PlutoPilot.cpp" 2
# 1 "./platform/Sensor.h" 1





       


# 1 "./platform/Comman.h" 1






       


extern "C" {


typedef enum {
    X = 0,
    Y,
    Z
} axis_e;


typedef enum {
    AG_ROLL = 0,
    AG_PITCH,
    AG_YAW,
} angle_e;




}
# 10 "./platform/Sensor.h" 2



extern "C" {



typedef enum {

    PRESSURE,
    TEMPERATURE

}baro_state_e;


class Accelerometer_P {
public:

    int16_t get(axis_e AXIS);
    int32_t getNetAcc(void);

};

class Gyroscope_P {
public:

    int16_t get(axis_e AXIS);

};

class Magnetometer_P {
public:

    int16_t get(axis_e AXIS);

};

class Barometer_P {
public:

    int32_t get(baro_state_e STATE);

};

extern Accelerometer_P Acceleration;
extern Gyroscope_P Gyroscope;
extern Magnetometer_P Magnetometer;
extern Barometer_P Barometer;


}
# 11 "src/main/PlutoPilot.cpp" 2
# 1 "./platform/User.h" 1





       






extern "C" {



typedef enum {

    RC_ROLL = 0,
    RC_PITCH,
    RC_YAW,
    RC_THROTTLE,
    RC_AUX1,
    RC_AUX2,
    RC_AUX3,
    RC_AUX4,
    RC_USER1,
    RC_USER2,
    RC_USER3

} rc_channel_e;

typedef enum {
    ANGLE,
    RATE,
    MAGHOLD,
    HEADFREE,
    ATLTITUDEHOLD,
    THROTTLE_MODE
}flight_mode_e;

typedef enum {

    BACK_FLIP

}flip_direction_e;




typedef enum {

    FS_ACCEL_GYRO_CALIBRATION = 0,
    FS_MAG_CALIBARATION,
    FS_LOW_BATTERY,
    FS_INFLIGHT_LOW_BATTERY,
    FS_CRASHED,
    FS_SIGNAL_LOSS,
    FS_NOT_OK_TO_ARM,
    FS_OK_TO_ARM,
    FS_ARMED

} flightstatus_e;



class RcData_P {
public:


    int16_t* get();
    int16_t get(rc_channel_e CHANNEL);


};


class RcCommand_P {
public:

    int16_t* get();
    int16_t get(rc_channel_e CHANNEL);
    void set(int16_t* rcValueArray);
    void set(rc_channel_e CHANNEL, int16_t rcValue);


};



class FlightMode_P {
public:

    bool check(flight_mode_e MODE);
    void set(flight_mode_e MODE);


};



class Command_P {
public:


    void takeOff(uint16_t height=150);
    void land(uint8_t landSpeed);
    void flip(flip_direction_e direction);
    bool arm();
    bool disArm();

};



class FlightStatus_P {
public:

    flightstatus_e get();
    bool check(flightstatus_e status);


};



class App_P {
public:

   int16_t getAppHeading(void);
   bool isArmSwitchOn(void);

};


void setUserLoopFrequency(float frequency);


extern RcData_P RcData;
extern RcCommand_P RcCommand;
extern FlightMode_P FlightMode;
extern Command_P Command;
extern FlightStatus_P FlightStatus;
extern App_P App;



}
# 12 "src/main/PlutoPilot.cpp" 2
# 1 "./platform/Control.h" 1






       






extern "C" {



typedef struct {

  uint8_t p;
  uint8_t i;
  uint8_t d;

} PID;



typedef enum{

    PID_ROLL,
    PID_PITCH,
    PID_YAW,
    PID_ALT,
    PID_USER

}pid_profile_e;


typedef enum {

    LOW_BATTERY,
    INFLIGHT_LOW_BATTERY,
    CRASH,
    ALL

} failsafe_e;


class DesiredAngle_P {
public:

    int32_t get(angle_e ANGLE);

    void set(angle_e ANGLE, int32_t angle);


};


class DesiredRate_P {
public:

    int32_t get(angle_e ANGLE);

    void set(angle_e ANGLE, int32_t rate);


};


class DesiredPosition_P {
public:

    int32_t get(axis_e AXIS);

    void set(axis_e AXIS, int32_t position);

    void setRelative(axis_e AXIS, int32_t position);


};


class DesiredVelocity_P {
public:

    int32_t get(axis_e AXIS);

    void set(axis_e AXIS, int32_t velocity);


};





class PIDProfile_P {
public:

    void get(pid_profile_e PROFILE,PID* pid);

    void set(pid_profile_e PROFILE, PID* pid);

    void setDefault();


};




class Failsafe_P {
public:

    void enable(failsafe_e FAILSAFE);

    void disable(failsafe_e FAILSAFE);


};


extern DesiredAngle_P DesiredAngle;
extern DesiredRate_P DesiredRate;
extern DesiredPosition_P DesiredPosition;
extern DesiredVelocity_P DesiredVelocity;
extern PIDProfile_P PIDProfile;
extern Failsafe_P Failsafe;





}
# 13 "src/main/PlutoPilot.cpp" 2


Interval T2;

void plutoInit()
{
 XRanging.init(LEFT);
 XRanging.init(RIGHT);




}




void onLoopStart()
{


 Command.takeOff(250);
 FlightMode.set(ATLTITUDEHOLD);

}


void plutoLoop()
{
# 52 "src/main/PlutoPilot.cpp"
 int val = XRanging.getRange(LEFT);
 int val2 = XRanging.getRange(RIGHT);


 if((val >= 100 && val <= 250) || (val2 > 10 && val2 < 80))
 {
  Monitor.println("LEFT ",val);

  RcCommand.set(RC_ROLL,1450);



 }



 if((val2 >= 100 && val2 <= 250) || (val > 10 && val < 80))
 {
  Monitor.println("RIGHT ",val2);
  RcCommand.set(RC_ROLL,1550);

 }



 bool flag = T2.set(2000,1);
    if(flag){
       val = -100;
       RcCommand.set(RC_ROLL,1500);
    }


}



void onLoopFinish()
{





}
